{"version":3,"file":"main.bdeac8070255474ec2e9.hot-update.js","sources":["webpack:///./src/customizations/components/manage/Toolbar/Toolbar.jsx"],"sourcesContent":["/**\n * Toolbar component.\n * @module components/manage/Toolbar/Toolbar\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport cookie from 'react-cookie';\nimport { filter, find } from 'lodash';\nimport cx from 'classnames';\n\nimport More from '@plone/volto/components/manage/Toolbar/More';\nimport PersonalTools from '@plone/volto/components/manage/Toolbar/PersonalTools';\nimport Types from '@plone/volto/components/manage/Toolbar/Types';\nimport PersonalInformation from '@plone/volto/components/manage/Preferences/PersonalInformation';\nimport PersonalPreferences from '@plone/volto/components/manage/Preferences/PersonalPreferences';\nimport StandardWrapper from '@plone/volto/components/manage/Toolbar/StandardWrapper';\nimport { getTypes, listActions } from '@plone/volto/actions';\nimport { Icon } from '@plone/volto/components';\nimport { BodyClass, getBaseUrl } from '@plone/volto/helpers';\n\nimport pastanagaSmall from '@plone/volto/components/manage/Toolbar/pastanaga-small.svg';\nimport pastanagalogo from '@plone/volto/components/manage/Toolbar/pastanaga.svg';\nimport penSVG from '@plone/volto/icons/pen.svg';\nimport folderSVG from '@plone/volto/icons/folder.svg';\nimport addSVG from '@plone/volto/icons/add-document.svg';\nimport moreSVG from '@plone/volto/icons/more.svg';\nimport userSVG from '@plone/volto/icons/user.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst toolbarComponents = {\n  personalTools: { component: PersonalTools, wrapper: null },\n  more: { component: More, wrapper: null },\n  types: { component: Types, wrapper: null },\n  profile: {\n    component: PersonalInformation,\n    wrapper: StandardWrapper,\n    hideToolbarBody: true,\n  },\n  preferences: {\n    component: PersonalPreferences,\n    wrapper: StandardWrapper,\n    hideToolbarBody: true,\n  },\n};\n\n/**\n * Toolbar container class.\n * @class Toolbar\n * @extends Component\n */\nclass Toolbar extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    token: PropTypes.string,\n    pathname: PropTypes.string.isRequired,\n    content: PropTypes.shape({\n      '@type': PropTypes.string,\n      is_folderish: PropTypes.bool,\n      review_state: PropTypes.string,\n    }),\n    getTypes: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        addable: PropTypes.bool,\n        title: PropTypes.string,\n      }),\n    ),\n    listActions: PropTypes.func.isRequired,\n    inner: PropTypes.element.isRequired,\n    hideDefaultViewButtons: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    actions: null,\n    token: null,\n    content: null,\n    hideDefaultViewButtons: false,\n    types: [],\n  };\n\n  state = {\n    expanded: cookie.load('toolbar_expanded') !== 'false',\n    showMenu: false,\n    menuStyle: {},\n    menuComponents: [],\n    loadedComponents: [],\n    hideToolbarBody: false,\n  };\n\n  toolbarWindow = React.createRef();\n\n  /**\n   * Component will mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.listActions(getBaseUrl(this.props.pathname));\n    this.props.getTypes(getBaseUrl(this.props.pathname));\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.listActions(getBaseUrl(nextProps.pathname));\n      this.props.getTypes(getBaseUrl(nextProps.pathname));\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillUnmount\n   * @returns {undefined}\n   */\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  handleShrink = () => {\n    cookie.save('toolbar_expanded', !this.state.expanded, {\n      expires: new Date((2 ** 31 - 1) * 1000),\n      path: '/',\n    });\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  closeMenu = () =>\n    this.setState(() => ({ showMenu: false, loadedComponents: [] }));\n\n  loadComponent = type => {\n    const { loadedComponents } = this.state;\n    if (!this.state.loadedComponents.includes(type)) {\n      this.setState({\n        loadedComponents: [...loadedComponents, type],\n        hideToolbarBody: toolbarComponents[type].hideToolbarBody || false,\n      });\n    }\n  };\n\n  unloadComponent = () => {\n    this.setState(state => ({\n      loadedComponents: state.loadedComponents.slice(0, -1),\n      hideToolbarBody:\n        toolbarComponents[\n          state.loadedComponents[state.loadedComponents.length - 2]\n        ].hideToolbarBody || false,\n    }));\n  };\n\n  toggleMenu = (e, selector) => {\n    if (this.state.showMenu) {\n      this.closeMenu();\n      return;\n    }\n    // PersonalTools always shows at bottom\n    if (selector === 'personalTools') {\n      this.setState(state => ({\n        showMenu: !state.showMenu,\n        menuStyle: { bottom: 0 },\n      }));\n    } else {\n      this.setState(state => ({\n        showMenu: !state.showMenu,\n        menuStyle: { top: 0 },\n      }));\n    }\n    this.loadComponent(selector);\n  };\n\n  handleClickOutside = e => {\n    if (this.pusher && doesNodeContainClick(this.pusher, e)) return;\n    this.closeMenu();\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const path = getBaseUrl(this.props.pathname);\n    const editAction = find(this.props.actions.object, { id: 'edit' });\n    const folderContentsAction = find(this.props.actions.object, {\n      id: 'folderContents',\n    });\n    const { expanded } = this.state;\n\n    return (\n      this.props.token && (\n        <>\n          <BodyClass\n            className={expanded ? 'has-toolbar' : 'has-toolbar-collapsed'}\n          />\n          <div\n            style={this.state.menuStyle}\n            className={\n              this.state.showMenu ? 'toolbar-content show' : 'toolbar-content'\n            }\n            ref={this.toolbarWindow}\n          >\n            {this.state.showMenu && (\n              // This sets the scroll locker in the body tag in mobile\n              <BodyClass className=\"has-toolbar-menu-open\" />\n            )}\n            <div\n              className=\"pusher-puller\"\n              ref={node => (this.pusher = node)}\n              style={{\n                transform: this.toolbarWindow.current\n                  ? `translateX(-${(this.state.loadedComponents.length - 1) *\n                      this.toolbarWindow.current.getBoundingClientRect()\n                        .width}px)`\n                  : null,\n              }}\n            >\n              {this.state.loadedComponents.map((component, index) =>\n                (() => {\n                  const ToolbarComponent =\n                    toolbarComponents[component].component;\n                  const WrapperComponent = toolbarComponents[component].wrapper;\n                  const haveActions =\n                    toolbarComponents[component].hideToolbarBody;\n                  if (WrapperComponent) {\n                    return (\n                      <WrapperComponent\n                        componentName={component}\n                        pathname={this.props.pathname}\n                        loadComponent={this.loadComponent}\n                        unloadComponent={this.unloadComponent}\n                        componentIndex={index}\n                        theToolbar={this.theToolbar}\n                        key={`personalToolsComponent-${index}`}\n                        closeMenu={this.closeMenu}\n                        hasActions={haveActions}\n                      >\n                        <ToolbarComponent\n                          pathname={this.props.pathname}\n                          loadComponent={this.loadComponent}\n                          unloadComponent={this.unloadComponent}\n                          componentIndex={index}\n                          theToolbar={this.theToolbar}\n                          closeMenu={this.closeMenu}\n                          isToolbarEmbedded\n                        />\n                      </WrapperComponent>\n                    );\n                  } else {\n                    return (\n                      <ToolbarComponent\n                        pathname={this.props.pathname}\n                        loadComponent={this.loadComponent}\n                        unloadComponent={this.unloadComponent}\n                        componentIndex={index}\n                        theToolbar={this.theToolbar}\n                        key={`personalToolsComponent-${index}`}\n                        closeMenu={this.closeMenu}\n                      />\n                    );\n                  }\n                })(),\n              )}\n            </div>\n          </div>\n          <div className={this.state.expanded ? 'toolbar expanded' : 'toolbar'}>\n            <div className=\"toolbar-body\">\n              <div className=\"toolbar-actions\">\n                {this.props.hideDefaultViewButtons && this.props.inner && (\n                  <>{this.props.inner}</>\n                )}\n                {!this.props.hideDefaultViewButtons && (\n                  <>\n                    {editAction && (\n                      <Link\n                        aria-label=\"Edit\"\n                        className=\"edit\"\n                        to={`${path}/edit`}\n                      >\n                        <Icon name={penSVG} size=\"30px\" className=\"circled\" />\n                      </Link>\n                    )}\n                    {this.props.content &&\n                      this.props.content.is_folderish &&\n                      folderContentsAction && (\n                        <Link aria-label=\"Contents\" to={`${path}/contents`}>\n                          <Icon name={folderSVG} size=\"30px\" />\n                        </Link>\n                      )}\n                    {this.props.content &&\n                      this.props.content.is_folderish &&\n                      this.props.types.length > 0 && (\n                        <button\n                          className=\"add\"\n                          aria-label=\"Add\"\n                          onClick={e => this.toggleMenu(e, 'types')}\n                          tabIndex={0}\n                          id=\"toolbar-add\"\n                        >\n                          <Icon name={addSVG} size=\"30px\" />\n                        </button>\n                      )}\n                    <div className=\"toolbar-button-spacer\" />\n                    <button\n                      className=\"more\"\n                      aria-label=\"More\"\n                      onClick={e => this.toggleMenu(e, 'more')}\n                      tabIndex={0}\n                      id=\"toolbar-more\"\n                    >\n                      <Icon\n                        className=\"mobile hidden\"\n                        name={moreSVG}\n                        size=\"30px\"\n                      />\n                      {this.state.showMenu ? (\n                        <Icon\n                          className=\"mobile only\"\n                          name={clearSVG}\n                          size=\"30px\"\n                        />\n                      ) : (\n                        <Icon\n                          className=\"mobile only\"\n                          name={moreSVG}\n                          size=\"30px\"\n                        />\n                      )}\n                    </button>\n                  </>\n                )}\n              </div>\n              <div className=\"toolbar-bottom\">\n                <img className=\"minipastanaga\" src={pastanagaSmall} alt=\"\" />\n                {!this.props.hideDefaultViewButtons && (\n                  <button\n                    className=\"user\"\n                    aria-label=\"Personal tools\"\n                    onClick={e => this.toggleMenu(e, 'personalTools')}\n                    tabIndex={0}\n                    id=\"toolbar-personal\"\n                  >\n                    <Icon name={userSVG} size=\"30px\" />\n                  </button>\n                )}\n                <div className=\"divider\" />\n                <div className=\"pastanagalogo\">\n                  <img src={pastanagalogo} alt=\"\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"toolbar-handler\">\n              {this.props.content ? (\n                <button\n                  aria-label=\"Shrink toolbar\"\n                  className={cx({\n                    [this.props.content.review_state]:\n                      this.props.content && this.props.content.review_state,\n                  })}\n                  onClick={this.handleShrink}\n                />\n              ) : (\n                ''\n              )}\n            </div>\n          </div>\n          <div className=\"pusher\" />\n        </>\n      )\n    );\n  }\n}\n\nexport default connect(\n  (state, props) => ({\n    actions: state.actions.actions,\n    token: state.userSession.token,\n    content: state.content.data,\n    pathname: props.pathname,\n    types: filter(state.types.types, 'addable'),\n  }),\n  { getTypes, listActions },\n)(Toolbar);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AATA;AAgBA;;;;;;AAKA;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAkCA;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;AAxFA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;;;;AA0DA;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAHA;AAQA;AAIA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAGA;AALA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AA5CA;AAgDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAIA;AANA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAnVA;AACA;AADA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAvBA;AACA;AAPA;AAsCA;AACA;AACA;AACA;AACA;AALA;AACA;AAgTA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA;AAAA;AAAA;;;;A","sourceRoot":""}