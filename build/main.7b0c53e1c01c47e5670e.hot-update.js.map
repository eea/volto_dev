{"version":3,"file":"main.7b0c53e1c01c47e5670e.hot-update.js","sources":["webpack:///./volto-mosaic/src/components/manage/Edit.jsx","webpack:///./volto-mosaic/src/index.js"],"sourcesContent":["import React, { Component } from 'react';\n// import VoltoEdit from '@plone/volto/components/manage/Edit/Edit';\nimport MosaicForm from './Form';\nimport { Form, Icon, Toolbar, Sidebar } from '@plone/volto/components';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport Helmet from 'react-helmet';\nimport { Portal } from 'react-portal';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport qs from 'query-string';\nimport { updateContent, getContent, getSchema } from '@plone/volto/actions';\nimport PropTypes from 'prop-types';\nimport { getBaseUrl, hasBlocksData } from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  edit: {\n    id: 'Edit {title}',\n    defaultMessage: 'Edit {title}',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\nclass Edit extends Component {\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    getContent: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    schemaRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    getRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    returnUrl: PropTypes.string,\n    content: PropTypes.shape({\n      '@type': PropTypes.string,\n    }),\n    schema: PropTypes.objectOf(PropTypes.any),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: {},\n    content: null,\n    returnUrl: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visual: true,\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getContent(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.getRequest.loading && nextProps.getRequest.loaded) {\n      this.props.getSchema(nextProps.content['@type']);\n    }\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      if (!hasBlocksData(nextProps.schema.properties)) {\n        this.setState({\n          visual: false,\n        });\n      }\n    }\n\n    // Hack for make the Plone site editable by Volto Editor without checkings\n    if (this.props.content && this.props.content['@type'] === 'Plone Site') {\n      this.setState({\n        visual: true,\n      });\n    }\n\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.history.push(\n        this.props.returnUrl || getBaseUrl(this.props.pathname),\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(getBaseUrl(this.props.pathname), data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(\n      this.props.returnUrl || getBaseUrl(this.props.pathname),\n    );\n  }\n\n  form = React.createRef();\n\n  render() {\n    // This is the only thing different from the original. This version comes\n    // from Volto 4.0.0.alpha-9\n    let isMosaic = false;\n    let content = this.props.content;\n\n    if (content && this.props.content.layout === 'mosaic_tiles_view')\n      isMosaic = true;\n    if (content && this.props.content['@type'] === 'Plone Site')\n      isMosaic = true;\n    const FormImpl = isMosaic ? MosaicForm : Form;\n    // const FwdFormImpl = React.forwardRef((props, ref) => (\n    //   <FormImpl {...props} />\n    // ));\n    //\n\n    return (\n      <div id=\"page-edit\">\n        <Helmet\n          title={\n            this.props?.schema?.title\n              ? this.props.intl.formatMessage(messages.edit, {\n                  title: this.props.schema.title,\n                })\n              : null\n          }\n        />\n        <FormImpl\n          ref={this.form}\n          schema={this.props.schema}\n          formData={this.props.content}\n          onSubmit={this.onSubmit}\n          hideActions\n          pathname={this.props.pathname}\n          visual={this.state.visual}\n          title={\n            this.props?.schema?.title\n              ? this.props.intl.formatMessage(messages.edit, {\n                  title: this.props.schema.title,\n                })\n              : null\n          }\n          loading={this.props.updateRequest.loading}\n        />\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            hideDefaultViewButtons\n            inner={\n              <>\n                <button\n                  id=\"toolbar-save\"\n                  className=\"save\"\n                  aria-label={this.props.intl.formatMessage(messages.save)}\n                  onClick={() => this.form.current.onSubmit()}\n                >\n                  <Icon\n                    name={saveSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.save)}\n                  />\n                </button>\n                <button\n                  className=\"cancel\"\n                  aria-label={this.props.intl.formatMessage(messages.cancel)}\n                  onClick={() => this.onCancel()}\n                >\n                  <Icon\n                    name={clearSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.cancel)}\n                  />\n                </button>\n              </>\n            }\n          />\n        </Portal>\n        {this.state.visual && (\n          <Portal node={__CLIENT__ && document.getElementById('sidebar')}>\n            <Sidebar />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  DragDropContext(HTML5Backend),\n  injectIntl,\n  connect(\n    (state, props) => ({\n      content: state.content.data,\n      schema: state.schema.schema,\n      getRequest: state.content.get,\n      schemaRequest: state.schema,\n      updateRequest: state.content.update,\n      pathname: props.location.pathname,\n      returnUrl: qs.parse(props.location.search).return_url,\n    }),\n    {\n      updateContent,\n      getContent,\n      getSchema,\n    },\n  ),\n)(Edit);\n","import EditMosaic from './components/manage/Edit';\nimport View from './components/theme/View';\n\nconst layoutViews = {\n  mosaic_tiles_view: View,\n};\n\nexport { layoutViews, EditMosaic };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AATA;AACA;AAcA;;;;;AAyBA;;;;;;AAWA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AACA;AACA;AADA;AAGA;AACA;AANA;AAOA;AAEA;;;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;AAKA;AACA;AAGA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AADA;AAKA;AAfA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAmCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAzMA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AAGA;AArBA;AACA;AAFA;AA+BA;AACA;AACA;AAHA;AACA;AA6KA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAUA;AACA;AACA;AAHA;;;;;;;;;;;;AC1PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;;;;;A","sourceRoot":""}