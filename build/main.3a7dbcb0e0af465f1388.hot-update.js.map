{"version":3,"file":"main.3a7dbcb0e0af465f1388.hot-update.js","sources":["webpack:///./volto-mosaic/src/actions/index.js","webpack:///./volto-mosaic/src/components/manage/BlockEditor.jsx","webpack:///./volto-mosaic/src/components/manage/BlockMetadataEditor.jsx","webpack:///./volto-mosaic/src/constants.js","webpack:///./volto/src/icons/hide.svg"],"sourcesContent":["import { GET_MOSAIC_SETTINGS } from './../constants';\n\nexport function getMosaicSettings() {\n  return {\n    type: GET_MOSAIC_SETTINGS,\n    request: {\n      op: 'get',\n      path: `/@mosaic-settings`,\n    },\n  };\n}\n","import React, { Component } from 'react';\n\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport { blocks } from '~/config';\nimport { Tab, Button, Modal, Grid } from 'semantic-ui-react';\nimport { Icon as VoltoIcon, BlockChooser } from '@plone/volto/components';\n\nimport BlockMetadataEditor from './BlockMetadataEditor';\n\nimport penIcon from '@plone/volto/icons/pen.svg';\nimport clearIcon from '@plone/volto/icons/clear.svg';\n\n// import PropTypes from 'prop-types';\n// import blockDataEditor from './blockDataEditor';\n\nclass ModalEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    const block = JSON.parse(\n      JSON.stringify(props.formData['blocks'][props.blockid]),\n    );\n\n    this.state = {\n      // blocks: props.blocks,\n      blockid: props.blockid,\n      formData: props.formData,\n      blockData: block,\n      showBlockChooser: false,\n      activeTabPage: 0,\n    };\n\n    this.blockRef = React.createRef();\n\n    this.renderEditBlock = this.renderEditBlock.bind(this);\n\n    // this is ugly, should reduce number of similar methods\n    this.onChangeBlock = this.onChangeBlock.bind(this);\n    this.onMutateBlock = this.onMutateBlock.bind(this);\n    this.handleMetadataChange = this.handleMetadataChange.bind(this);\n    this.updateblockData = this.updateblockData.bind(this);\n    this.handleTabChange = this.handleTabChange.bind(this);\n\n    this.panes = [];\n  }\n\n  handleClickOutside = e => {\n    if (this.ref && doesNodeContainClick(this.ref, e)) return;\n    this.setState(() => ({\n      showBlockChooser: false,\n    }));\n  };\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  renderEditBlock() {\n    // const { formData } = this.state; // destructuring\n    // const blocksFieldname = getBlocksFieldname(formData);\n    // const blocksDict = formData[blocksFieldname];\n\n    let Block = null;\n    let type = this.state.blockData['@type'].toLowerCase();\n    Block = blocks.blocksConfig[type].edit;\n\n    let nop = () => {};\n\n    return (\n      <Block\n        id={this.state.blockid}\n        block={this.state.blockid}\n        data={this.state.blockData}\n        properties={this.state.formData}\n        onAddBlock={nop}\n        onChangeBlock={this.onChangeBlock}\n        onMutateBlock={nop}\n        onChangeField={nop}\n        onDeleteBlock={nop}\n        onSelectBlock={nop}\n        handleKeyDown={nop}\n        pathname={this.props.pathname}\n        onMoveBlock={nop}\n        onFocusPreviousBlock={nop}\n        onFocusNextBlock={nop}\n        selected={true}\n        index={0}\n        ref={this.blockRef}\n      />\n    );\n  }\n\n  onChangeBlock(id, value) {\n    // handles editing inside the actual block editor (ex: TinyMCE)\n    this.setState({\n      blockData: { ...value },\n    });\n  }\n\n  onMutateBlock(block, choice) {\n    // handles changing the block type. Needed by the <Block> component?\n    this.setState({\n      blockData: {\n        ...this.state.blockData,\n        ...choice,\n      },\n      showBlockChooser: false,\n      activeTabPage: 0,\n    });\n  }\n\n  handleMetadataChange(values) {\n    // handles changes coming from the metadata editor\n\n    let blockData = this.state.blockData;\n    this.setState(\n      {\n        blockData: {\n          ...blockData,\n          ...values,\n        },\n      },\n      () => {\n        // console.log('State after handleMetadataChange', this.state);\n      },\n    );\n  }\n\n  updateblockData(name, data) {\n    let blockData = this.state.blockData;\n    // TODO: check if this doesn't introduce extra render of block editor\n\n    this.setState({\n      blockData: {\n        ...blockData,\n        [name]: data,\n      },\n    });\n  }\n\n  handleTabChange(e, { activeIndex }) {\n    this.setState({\n      activeTabPage: activeIndex,\n    });\n  }\n\n  render() {\n    return (\n      <Modal open={true} size=\"fullscreen\">\n        <Modal.Content scrolling>\n          <Tab\n            onTabChange={this.handleTabChange}\n            activeIndex={this.state.activeTabPage}\n            menu={{\n              secondary: true,\n              pointing: true,\n              attached: true,\n              tabular: true,\n            }}\n            panes={[\n              {\n                menuItem: 'Data',\n                render: () => <Tab.Pane>{this.renderEditBlock()}</Tab.Pane>,\n              },\n              {\n                menuItem: 'Metadata',\n                render: () => (\n                  <Tab.Pane>\n                    <BlockMetadataEditor\n                      onDataChange={this.handleMetadataChange}\n                      blockData={this.state.blockData}\n                    />\n                  </Tab.Pane>\n                ),\n              },\n            ]}\n          />\n        </Modal.Content>\n        <Modal.Actions>\n          <Grid columns={2}>\n            <Grid.Column style={{ textAlign: 'left' }}>\n              <Button.Group floated=\"left\">\n                <Button\n                  onClick={() => this.setState({ showBlockChooser: true })}\n                >\n                  {this.state.blockData['@type']\n                    ? blocks.blocksConfig[this.state.blockData['@type']].title\n                    : 'Set type'}\n                </Button>\n\n                <div ref={node => (this.ref = node)}>\n                  {this.state.showBlockChooser && (\n                    <BlockChooser\n                      onMutateBlock={this.onMutateBlock}\n                      currentBlock={this.state.blockData}\n                    />\n                  )}\n                </div>\n              </Button.Group>\n            </Grid.Column>\n            <Grid.Column>\n              <Button.Group floated=\"right\">\n                <Button\n                  basic\n                  circular\n                  primary\n                  onClick={() => this.props.onClose(this.state.blockData)}\n                >\n                  <VoltoIcon name={penIcon} className=\"circled\" />\n                </Button>\n                <Button\n                  basic\n                  circular\n                  secondary\n                  size=\"big\"\n                  onClick={() => this.props.onClose()}\n                >\n                  <VoltoIcon name={clearIcon} className=\"circled\" />\n                </Button>\n              </Button.Group>\n            </Grid.Column>\n          </Grid>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nexport default ModalEditor;\n","import React, { Component } from 'react';\nimport { Grid, Button, Form as UiForm, Input } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { getMosaicSettings } from '../../actions';\nimport { Field } from '@plone/volto/components'; // EditBlock\nimport { Icon as VoltoIcon } from '@plone/volto/components';\n\nimport showIcon from '@plone/volto/icons/show.svg';\nimport hideIcon from '@plone/volto/icons/hide.svg';\n\nimport BlockStyleSelectWidget from './BlockStyleSelectWidget';\n\n// import PropTypes from 'prop-types';\nexport const SIZING_POLICY_CHOICES = [\n  ['fit-content', 'Shrink fit to content'],\n  ['min-height', 'Minimum block height (specific to each block type)'],\n  ['fill-space', 'Fill available space'],\n  ['manual', 'Resized manually'],\n];\n\nclass BlockMetadataEditor extends Component {\n  constructor(props) {\n    super(props);\n    console.log('props in blockmetadateeditor', props);\n\n    const block = JSON.parse(JSON.stringify(props.blockData));\n    let show_block_title = block.show_block_title;\n\n    if (Object.keys(block).indexOf('show_block_title') === -1) {\n      show_block_title = true;\n    }\n\n    this.state = {\n      settings: props.settings,\n      selectedBoxStyle: block.mosaic_box_style || 'default-block',\n\n      mosaic_block_title: block.mosaic_block_title,\n      mosaic_box_sizing: block.mosaic_box_sizing || 'fit-content',\n      block_title: block.block_title,\n      show_block_title,\n    };\n\n    this.updateData = this.updateData.bind(this);\n\n    // this.getCard = this.getCard.bind(this);\n    // this.handleSelectBoxStyle = this.handleSelectBoxStyle.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let oldSettings = JSON.stringify(this.props.settings);\n    let newSettings = JSON.stringify(nextProps.settings);\n\n    if (oldSettings !== newSettings) {\n      this.setState({ settings: nextProps.settings });\n    }\n  }\n\n  componentDidMount() {\n    this.props.getMosaicSettings();\n  }\n\n  updateData(obj) {\n    this.setState(obj, () => {\n      this.props.onDataChange(obj);\n    });\n  }\n\n  render() {\n    let styles = (this.state.settings && this.state.settings.styles) || [];\n    console.log('will pass styles', styles);\n    return (\n      <UiForm>\n        <UiForm.Field\n          inline\n          required={false}\n          className=\"help block-title\"\n          id=\"field-block-title\"\n        >\n          <Grid>\n            <Grid.Row stretched>\n              <Grid.Column width=\"4\">\n                <label htmlFor=\"block-title\">Title:</label>\n              </Grid.Column>\n              <Grid.Column width=\"8\">\n                <Input\n                  id=\"block-title\"\n                  type=\"text\"\n                  defaultValue={this.state.block_title || ''}\n                  onChange={(e, d) => this.updateData({ block_title: d.value })}\n                  icon={\n                    <Button\n                      color={this.state.show_block_title ? 'green' : 'red'}\n                      onClick={() =>\n                        this.updateData({\n                          show_block_title: !this.state.show_block_title,\n                        })\n                      }\n                    >\n                      <VoltoIcon\n                        size=\"20\"\n                        name={this.state.show_block_title ? showIcon : hideIcon}\n                      />\n                    </Button>\n                  }\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </UiForm.Field>\n\n        <Field\n          id=\"mosaic-title\"\n          title=\"Block name\"\n          type=\"text\"\n          description=\"Identifier for this block\"\n          value={this.state.mosaic_block_title}\n          required={false}\n          onChange={(e, d) => this.updateData({ mosaic_block_title: d })}\n        />\n\n        <BlockStyleSelectWidget\n          title=\"Block style\"\n          description=\"Select a style to apply to this block\"\n          value={this.state.selectedBoxStyle}\n          options={styles}\n          id=\"block-style-select\"\n          onChange={(name, selection) =>\n            this.updateData({ mosaic_box_style: selection })\n          }\n        />\n\n        <Field\n          id=\"sizing-policy\"\n          title=\"Height sizing policy\"\n          description=\"Set the default sizing policy for this block\"\n          value={this.state.mosaic_box_sizing}\n          onChange={(e, d) => {\n            this.updateData({ mosaic_box_sizing: d });\n          }}\n          choices={SIZING_POLICY_CHOICES}\n        />\n      </UiForm>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    settings: state.mosaic_settings.items,\n  }),\n  { getMosaicSettings },\n)(BlockMetadataEditor);\n","export const GET_MOSAIC_SETTINGS = 'GET_MOSAIC_SETTINGS';\n","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M18.0474,27 C15.8624,27 13.7604,26.488 11.8884,25.573 L13.8634,23.598 C15.0324,24.474 16.4774,25 18.0474,25 C21.9074,25 25.0474,21.859 25.0474,18 C25.0474,16.43 24.5214,14.985 23.6454,13.816 L25.9904,11.471 C28.2964,13.058 30.0884,15.321 30.9964,18 C29.1954,23.314 23.9174,27 18.0474,27 L18.0474,27 Z M13.0474,18 C13.0474,15.243 15.2904,13 18.0474,13 C19.0644,13 20.0094,13.309 20.8004,13.833 L18.1254,16.508 C18.0994,16.506 18.0744,16.5 18.0474,16.5 C17.2194,16.5 16.5474,17.172 16.5474,18 C16.5474,18.027 16.5534,18.052 16.5554,18.078 L13.8804,20.753 C13.3564,19.962 13.0474,19.017 13.0474,18 L13.0474,18 Z M23.0474,18 C23.0474,20.757 20.8044,23 18.0474,23 C17.0304,23 16.0854,22.691 15.2944,22.167 L17.9694,19.492 C17.9954,19.494 18.0204,19.5 18.0474,19.5 C18.8754,19.5 19.5474,18.828 19.5474,18 C19.5474,17.973 19.5414,17.948 19.5394,17.922 L22.2144,15.247 C22.7384,16.038 23.0474,16.983 23.0474,18 L23.0474,18 Z M5.0984,18 C6.8994,12.686 12.1774,9 18.0474,9 C20.2324,9 22.3344,9.512 24.2064,10.427 L22.2314,12.402 C21.0624,11.526 19.6174,11 18.0474,11 C14.1874,11 11.0474,14.141 11.0474,18 C11.0474,19.57 11.5734,21.015 12.4494,22.184 L10.1044,24.529 C7.7984,22.942 6.0064,20.679 5.0984,18 L5.0984,18 Z M33.0024,17.703 C32.0314,14.579 30.0284,11.924 27.4224,10.039 L30.7544,6.707 L29.3404,5.293 L25.6814,8.952 C23.3934,7.71 20.7784,7 18.0474,7 C11.2014,7 5.0514,11.401 3.0924,17.703 L3.0004,18 L3.0924,18.297 C4.0634,21.421 6.0664,24.076 8.6724,25.961 L5.3404,29.293 L6.7544,30.707 L10.4134,27.048 C12.7014,28.29 15.3164,29 18.0474,29 C24.8934,29 31.0434,24.599 33.0024,18.297 L33.0944,18 L33.0024,17.703 Z\\\"/>\"}"],"mappings":"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","sourceRoot":""}