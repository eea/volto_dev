{"version":3,"file":"main.ba0ef4d809f242247e50.hot-update.js","sources":["webpack:///./volto-mosaic/src/components/manage/BlockEditor.jsx"],"sourcesContent":["import React, { Component } from 'react';\n\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport { blocks } from '~/config';\nimport { Tab, Button, Modal, Grid } from 'semantic-ui-react';\nimport { Icon as VoltoIcon, BlockChooser } from '@plone/volto/components';\n\nimport BlockMetadataEditor from './BlockMetadataEditor';\n\nimport penIcon from '@plone/volto/icons/pen.svg';\nimport clearIcon from '@plone/volto/icons/clear.svg';\n\n// import PropTypes from 'prop-types';\n// import blockDataEditor from './blockDataEditor';\n\nclass ModalEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    const block = JSON.parse(\n      JSON.stringify(props.formData['blocks'][props.blockid]),\n    );\n\n    this.state = {\n      // blocks: props.blocks,\n      blockid: props.blockid,\n      formData: props.formData,\n      blockData: block,\n      showBlockChooser: false,\n      activeTabPage: 0,\n    };\n\n    this.blockRef = React.createRef();\n\n    this.renderEditBlock = this.renderEditBlock.bind(this);\n\n    // this is ugly, should reduce number of similar methods\n    this.onChangeBlock = this.onChangeBlock.bind(this);\n    this.onMutateBlock = this.onMutateBlock.bind(this);\n    this.handleMetadataChange = this.handleMetadataChange.bind(this);\n    this.updateblockData = this.updateblockData.bind(this);\n    this.handleTabChange = this.handleTabChange.bind(this);\n\n    this.panes = [];\n  }\n\n  handleClickOutside = e => {\n    if (this.ref && doesNodeContainClick(this.ref, e)) return;\n    this.setState(() => ({\n      showBlockChooser: false,\n    }));\n  };\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  renderEditBlock() {\n    // const { formData } = this.state; // destructuring\n    // const blocksFieldname = getBlocksFieldname(formData);\n    // const blocksDict = formData[blocksFieldname];\n\n    let Block = null;\n    let type = this.state.blockData['@type'].toLowerCase();\n    Block = blocks.blocksConfig[type].edit;\n\n    let nop = () => {};\n\n    return (\n      <Block\n        // id={this.state.blockid}\n        // block={this.state.blockid}\n        // data={this.state.blockData}\n        // properties={this.state.formData}\n        // onAddBlock={nop}\n        // onChangeBlock={this.onChangeBlock}\n        // onMutateBlock={nop}\n        // onChangeField={nop}\n        // onDeleteBlock={nop}\n        // onSelectBlock={nop}\n        // handleKeyDown={nop}\n        // pathname={this.props.pathname}\n        // onMoveBlock={nop}\n        // onFocusPreviousBlock={nop}\n        // onFocusNextBlock={nop}\n        // selected={true}\n        // index={0}\n        // ref={this.blockRef}\n      \n        id={this.state.blockid}\n        index={index}\n        type={blocksDict[block]['@type']}\n        key={this.state.blockid}\n        handleKeyDown={this.handleKeyDown}\n        onAddBlock={this.onAddBlock}\n        onChangeBlock={this.onChangeBlock}\n        onMutateBlock={this.onMutateBlock}\n        onChangeField={this.onChangeField}\n        onDeleteBlock={this.onDeleteBlock}\n        onSelectBlock={this.onSelectBlock}\n        onMoveBlock={this.onMoveBlock}\n        onFocusPreviousBlock={this.onFocusPreviousBlock}\n        onFocusNextBlock={this.onFocusNextBlock}\n        properties={formData}\n        data={blocksDict[block]}\n        pathname={this.props.pathname}\n        block={this.state.blockid}\n        selected={this.state.selected === this.state.blockid}\n      />\n    );\n  }\n\n  onChangeBlock(id, value) {\n    // handles editing inside the actual block editor (ex: TinyMCE)\n    this.setState({\n      blockData: { ...value },\n    });\n  }\n\n  onMutateBlock(block, choice) {\n    // handles changing the block type. Needed by the <Block> component?\n    this.setState({\n      blockData: {\n        ...this.state.blockData,\n        ...choice,\n      },\n      showBlockChooser: false,\n      activeTabPage: 0,\n    });\n  }\n\n  handleMetadataChange(values) {\n    // handles changes coming from the metadata editor\n\n    let blockData = this.state.blockData;\n    this.setState(\n      {\n        blockData: {\n          ...blockData,\n          ...values,\n        },\n      },\n      () => {\n        // console.log('State after handleMetadataChange', this.state);\n      },\n    );\n  }\n\n  updateblockData(name, data) {\n    let blockData = this.state.blockData;\n    // TODO: check if this doesn't introduce extra render of block editor\n\n    this.setState({\n      blockData: {\n        ...blockData,\n        [name]: data,\n      },\n    });\n  }\n\n  handleTabChange(e, { activeIndex }) {\n    this.setState({\n      activeTabPage: activeIndex,\n    });\n  }\n\n  render() {\n    return (\n      <Modal open={true} size=\"fullscreen\">\n        <Modal.Content scrolling>\n          <Tab\n            onTabChange={this.handleTabChange}\n            activeIndex={this.state.activeTabPage}\n            menu={{\n              secondary: true,\n              pointing: true,\n              attached: true,\n              tabular: true,\n            }}\n            panes={[\n              {\n                menuItem: 'Data',\n                render: () => <Tab.Pane>{this.renderEditBlock()}</Tab.Pane>,\n              },\n              {\n                menuItem: 'Metadata',\n                render: () => (\n                  <Tab.Pane>\n                    <BlockMetadataEditor\n                      onDataChange={this.handleMetadataChange}\n                      blockData={this.state.blockData}\n                    />\n                  </Tab.Pane>\n                ),\n              },\n            ]}\n          />\n        </Modal.Content>\n        <Modal.Actions>\n          <Grid columns={2}>\n            <Grid.Column style={{ textAlign: 'left' }}>\n              <Button.Group floated=\"left\">\n                <Button\n                  onClick={() => this.setState({ showBlockChooser: true })}\n                >\n                  {this.state.blockData['@type']\n                    ? blocks.blocksConfig[this.state.blockData['@type']].title\n                    : 'Set type'}\n                </Button>\n\n                <div ref={node => (this.ref = node)}>\n                  {this.state.showBlockChooser && (\n                    <BlockChooser\n                      onMutateBlock={this.onMutateBlock}\n                      currentBlock={this.state.blockData}\n                    />\n                  )}\n                </div>\n              </Button.Group>\n            </Grid.Column>\n            <Grid.Column>\n              <Button.Group floated=\"right\">\n                <Button\n                  basic\n                  circular\n                  primary\n                  onClick={() => this.props.onClose(this.state.blockData)}\n                >\n                  <VoltoIcon name={penIcon} className=\"circled\" />\n                </Button>\n                <Button\n                  basic\n                  circular\n                  secondary\n                  size=\"big\"\n                  onClick={() => this.props.onClose()}\n                >\n                  <VoltoIcon name={clearIcon} className=\"circled\" />\n                </Button>\n              </Button.Group>\n            </Grid.Column>\n          </Grid>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nexport default ModalEditor;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA+BA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAjCA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AA3BA;AA4BA;AACA;;;AAQA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAAA;AAAA;AAAA;AAAA;AAyCA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AAIA;AACA;AANA;AAQA;;;AAEA;AACA;AAEA;AACA;AAEA;AADA;AAQA;AAEA;;;AAEA;AACA;AACA;AAEA;AACA;AADA;AAMA;;;AAEA;AAAA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAdA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AA1OA;AACA;AA4OA;;;;A","sourceRoot":""}