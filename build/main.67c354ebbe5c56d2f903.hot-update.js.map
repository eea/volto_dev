{"version":3,"file":"main.67c354ebbe5c56d2f903.hot-update.js","sources":["webpack:///./volto-mosaic/src/components/manage/BlockMetadataEditor.jsx","webpack:///./volto-mosaic/src/components/manage/BlockStyleSelectWidget.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Button, Form as UiForm, Input } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { getMosaicSettings } from '../../actions';\nimport { Field } from '@plone/volto/components'; // EditBlock\nimport { Icon as VoltoIcon } from '@plone/volto/components';\n\nimport showIcon from '@plone/volto/icons/show.svg';\nimport hideIcon from '@plone/volto/icons/hide.svg';\n\nimport BlockStyleSelectWidget from './BlockStyleSelectWidget';\n\n// import PropTypes from 'prop-types';\nexport const SIZING_POLICY_CHOICES = [\n  ['fit-content', 'Shrink fit to content'],\n  ['min-height', 'Minimum block height (specific to each block type)'],\n  ['fill-space', 'Fill available space'],\n  ['manual', 'Resized manually'],\n];\n\nclass BlockMetadataEditor extends Component {\n  constructor(props) {\n    super(props);\n    console.log('props in blockmetadateeditor', props);\n\n    const block = JSON.parse(JSON.stringify(props.blockData));\n    let show_block_title = block.show_block_title;\n\n    if (Object.keys(block).indexOf('show_block_title') === -1) {\n      show_block_title = true;\n    }\n\n    this.state = {\n      settings: props.settings,\n      selectedBoxStyle: block.mosaic_box_style || 'default-block',\n\n      mosaic_block_title: block.mosaic_block_title,\n      mosaic_box_sizing: block.mosaic_box_sizing || 'fit-content',\n      block_title: block.block_title,\n      show_block_title,\n    };\n\n    this.updateData = this.updateData.bind(this);\n\n    // this.getCard = this.getCard.bind(this);\n    // this.handleSelectBoxStyle = this.handleSelectBoxStyle.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let oldSettings = JSON.stringify(this.props.settings);\n    let newSettings = JSON.stringify(nextProps.settings);\n\n    if (oldSettings !== newSettings) {\n      this.setState({ settings: nextProps.settings });\n    }\n  }\n\n  componentDidMount() {\n    this.props.getMosaicSettings();\n  }\n\n  updateData(obj) {\n    this.setState(obj, () => {\n      this.props.onDataChange(obj);\n    });\n  }\n\n  render() {\n    let styles = (this.state.settings && this.state.settings.styles) || [];\n    console.log('will pass styles', styles);\n    return (\n      <UiForm>\n        <UiForm.Field\n          inline\n          required={false}\n          className=\"help block-title\"\n          id=\"field-block-title\"\n        >\n          <Grid>\n            <Grid.Row stretched>\n              <Grid.Column width=\"4\">\n                <label htmlFor=\"block-title\">Title:</label>\n              </Grid.Column>\n              <Grid.Column width=\"8\">\n                <Input\n                  id=\"block-title\"\n                  type=\"text\"\n                  defaultValue={this.state.block_title || ''}\n                  onChange={(e, d) => this.updateData({ block_title: d.value })}\n                  icon={\n                    <Button\n                      color={this.state.show_block_title ? 'green' : 'red'}\n                      onClick={() =>\n                        this.updateData({\n                          show_block_title: !this.state.show_block_title,\n                        })\n                      }\n                    >\n                      <VoltoIcon\n                        size=\"20\"\n                        name={this.state.show_block_title ? showIcon : hideIcon}\n                      />\n                    </Button>\n                  }\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </UiForm.Field>\n\n        <Field\n          id=\"mosaic-title\"\n          title=\"Block name\"\n          type=\"text\"\n          description=\"Identifier for this block\"\n          value={this.state.mosaic_block_title}\n          required={false}\n          onChange={(e, d) => this.updateData({ mosaic_block_title: d })}\n        />\n\n        <BlockStyleSelectWidget\n          title=\"Block style\"\n          description=\"Select a style to apply to this block\"\n          value={this.state.selectedBoxStyle}\n          options={styles}\n          id=\"block-style-select\"\n          onChange={(name, selection) =>\n            this.updateData({ mosaic_box_style: selection })\n          }\n        />\n\n        <Field\n          id=\"sizing-policy\"\n          title=\"Height sizing policy\"\n          description=\"Set the default sizing policy for this block\"\n          value={this.state.mosaic_box_sizing}\n          onChange={(e, d) => {\n            this.updateData({ mosaic_box_sizing: d });\n          }}\n          choices={SIZING_POLICY_CHOICES}\n        />\n      </UiForm>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    settings: state.mosaic_settings.items,\n  }),\n  { getMosaicSettings },\n)(BlockMetadataEditor);\n","import React, { Component } from 'react';\nimport { Menu, Form as UiForm, Grid, Item } from 'semantic-ui-react';\n\nclass BlockStyleSelectWidget extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...props,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    console.log('props in style select', props);\n  }\n\n  handleClick(e, data) {\n    this.setState({ value: data.name }, () => {\n      this.props.onChange(this.props.id, data.name);\n    });\n  }\n\n  render() {\n    const { id, title } = this.props;\n    // const selected = this.state.value;\n    return (\n      <UiForm.Field inline required={this.props.required}>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width=\"4\">\n              <label htmlFor={`field-${id}`}>{title}</label>\n            </Grid.Column>\n            <Grid.Column width=\"8\">\n              <Menu inverted fluid vertical>\n                <Item.Group>\n                  {this.props.options.map(style => {\n                    const [opttitle, optid] = style.split('|');\n                    const klass = 'block-box preview ' + optid;\n                    return (\n                      <Menu.Item\n                        name={optid}\n                        active={optid === this.state.value}\n                        onClick={this.handleClick}\n                        key={optid}\n                      >\n                        <Item.Image size=\"tiny\">\n                          <div className={klass} />\n                        </Item.Image>\n                        <Item.Content verticalAlign=\"middle\">\n                          {opttitle}\n                        </Item.Content>\n                      </Menu.Item>\n                    );\n                  })}\n                </Item.Group>\n              </Menu>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </UiForm.Field>\n    );\n  }\n}\n\nexport default BlockStyleSelectWidget;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAPA;AAUA;AAGA;AACA;AAzBA;AAyBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AADA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;AA3HA;AACA;AA6HA;AACA;AACA;AADA;AAAA;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAGA;AACA;AANA;AAOA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAQA;;;;AAvDA;AACA;AAyDA;;;;A","sourceRoot":""}