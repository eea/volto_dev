{"version":3,"file":"main.e68154e449ae0468d049.hot-update.js","sources":["webpack:///./src/customizations/components/manage/Form/Form.jsx"],"sourcesContent":["/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { keys, map, mapValues, omit, uniq, without } from 'lodash';\nimport move from 'lodash-move';\nimport isBoolean from 'lodash/isBoolean';\nimport {\n  Button,\n  Container,\n  Form as UiForm,\n  Segment,\n  Tab,\n  Message,\n} from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\nimport { Portal } from 'react-portal';\n\nimport { EditBlock, Icon, Field } from '@plone/volto/components';\nimport { getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\n\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  addBlock: {\n    id: 'Add block...',\n    defaultMessage: 'Add block...',\n  },\n  required: {\n    id: 'Required input is missing.',\n    defaultMessage: 'Required input is missing.',\n  },\n  minLength: {\n    id: 'Minimum length is {len}.',\n    defaultMessage: 'Minimum length is {len}.',\n  },\n  uniqueItems: {\n    id: 'Items must be unique.',\n    defaultMessage: 'Items must be unique.',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  thereWereSomeErrors: {\n    id: 'There were some errors.',\n    defaultMessage: 'There were some errors.',\n  },\n});\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      definitions: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }),\n    formData: PropTypes.objectOf(PropTypes.any),\n    pathname: PropTypes.string,\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n    submitLabel: PropTypes.string,\n    resetAfterSubmit: PropTypes.bool,\n    title: PropTypes.string,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    hideActions: PropTypes.bool,\n    description: PropTypes.string,\n    visual: PropTypes.bool,\n    blocks: PropTypes.arrayOf(PropTypes.object),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    formData: null,\n    onSubmit: null,\n    onCancel: null,\n    submitLabel: null,\n    resetAfterSubmit: false,\n    title: null,\n    description: null,\n    error: null,\n    loading: null,\n    hideActions: false,\n    visual: false,\n    blocks: [],\n    pathname: '',\n    schema: {},\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    const ids = {\n      title: uuid(),\n      text: uuid(),\n    };\n    let { formData } = props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    if (formData === null) {\n      // get defaults from schema\n      formData = mapValues(props.schema.properties, 'default');\n    }\n    // defaults for block editor; should be moved to schema on server side\n    if (!formData[blocksLayoutFieldname]) {\n      formData[blocksLayoutFieldname] = {\n        items: [ids.title, ids.text],\n      };\n    }\n    if (!formData[blocksFieldname]) {\n      formData[blocksFieldname] = {\n        [ids.title]: {\n          '@type': 'title',\n        },\n        [ids.text]: {\n          '@type': 'text',\n        },\n      };\n    }\n    this.state = {\n      formData,\n      errors: {},\n      selected:\n        formData[blocksLayoutFieldname].items.length > 0\n          ? formData[blocksLayoutFieldname].items[0]\n          : null,\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onChangeBlock = this.onChangeBlock.bind(this);\n    this.onMutateBlock = this.onMutateBlock.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onDeleteBlock = this.onDeleteBlock.bind(this);\n    this.onAddBlock = this.onAddBlock.bind(this);\n    this.onMoveBlock = this.onMoveBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onFocusPreviousBlock = this.onFocusPreviousBlock.bind(this);\n    this.onFocusNextBlock = this.onFocusNextBlock.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  /**\n   * Change field handler\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        // We need to catch also when the value equals false this fixes #888\n        [id]: value || (value !== undefined && isBoolean(value)) ? value : null,\n      },\n    });\n  }\n\n  /**\n   * Change block handler\n   * @method onChangeBlock\n   * @param {string} id Id of the block\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeBlock(id, value) {\n    const blocksFieldname = getBlocksFieldname(this.state.formData);\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [blocksFieldname]: {\n          ...this.state.formData[blocksFieldname],\n          [id]: value || null,\n        },\n      },\n    });\n  }\n\n  /**\n   * Change block handler\n   * @method onMutateBlock\n   * @param {string} id Id of the block\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onMutateBlock(id, value) {\n    const idTrailingBlock = uuid();\n    const blocksFieldname = getBlocksFieldname(this.state.formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n    const index =\n      this.state.formData[blocksLayoutFieldname].items.indexOf(id) + 1;\n\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [blocksFieldname]: {\n          ...this.state.formData[blocksFieldname],\n          [id]: value || null,\n          [idTrailingBlock]: {\n            '@type': 'text',\n          },\n        },\n        [blocksLayoutFieldname]: {\n          items: [\n            ...this.state.formData[blocksLayoutFieldname].items.slice(0, index),\n            idTrailingBlock,\n            ...this.state.formData[blocksLayoutFieldname].items.slice(index),\n          ],\n        },\n      },\n    });\n  }\n\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @returns {undefined}\n   */\n  onSelectBlock(id) {\n    this.setState({\n      selected: id,\n    });\n  }\n\n  /**\n   * Delete block handler\n   * @method onDeleteBlock\n   * @param {string} id Id of the field\n   * @param {bool} selectPrev True if previous should be selected\n   * @returns {undefined}\n   */\n  onDeleteBlock(id, selectPrev) {\n    const blocksFieldname = getBlocksFieldname(this.state.formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [blocksLayoutFieldname]: {\n          items: without(this.state.formData[blocksLayoutFieldname].items, id),\n        },\n        [blocksFieldname]: omit(this.state.formData[blocksFieldname], [id]),\n      },\n      selected: selectPrev\n        ? this.state.formData[blocksLayoutFieldname].items[\n            this.state.formData[blocksLayoutFieldname].items.indexOf(id) - 1\n          ]\n        : null,\n    });\n  }\n\n  /**\n   * Add block handler\n   * @method onAddBlock\n   * @param {string} type Type of the block\n   * @param {Number} index Index where to add the block\n   * @returns {string} Id of the block\n   */\n  onAddBlock(type, index) {\n    const id = uuid();\n    const idTrailingBlock = uuid();\n    const blocksFieldname = getBlocksFieldname(this.state.formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n    const totalItems = this.state.formData[blocksLayoutFieldname].items.length;\n    const insert = index === -1 ? totalItems : index;\n\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [blocksLayoutFieldname]: {\n          items: [\n            ...this.state.formData[blocksLayoutFieldname].items.slice(\n              0,\n              insert,\n            ),\n            id,\n            ...(type !== 'text' ? [idTrailingBlock] : []),\n            ...this.state.formData[blocksLayoutFieldname].items.slice(insert),\n          ],\n        },\n        [blocksFieldname]: {\n          ...this.state.formData[blocksFieldname],\n          [id]: {\n            '@type': type,\n          },\n          ...(type !== 'text' && {\n            [idTrailingBlock]: {\n              '@type': 'text',\n            },\n          }),\n        },\n      },\n      selected: id,\n    });\n\n    return id;\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    const errors = {};\n    map(this.props.schema.fieldsets, fieldset =>\n      map(fieldset.fields, fieldId => {\n        const field = this.props.schema.properties[fieldId];\n        var data = this.state.formData[fieldId];\n        if (typeof data === 'string' || data instanceof String) {\n          data = data.trim();\n        }\n        if (this.props.schema.required.indexOf(fieldId) !== -1) {\n          if (field.type !== 'boolean' && !data) {\n            errors[fieldId] = errors[field] || [];\n            errors[fieldId].push(\n              this.props.intl.formatMessage(messages.required),\n            );\n          }\n          if (field.minLength && data.length < field.minLength) {\n            errors[fieldId] = errors[field] || [];\n            errors[fieldId].push(\n              this.props.intl.formatMessage(messages.minLength, {\n                len: field.minLength,\n              }),\n            );\n          }\n        }\n        if (field.uniqueItems && data && uniq(data).length !== data.length) {\n          errors[fieldId] = errors[field] || [];\n          errors[fieldId].push(\n            this.props.intl.formatMessage(messages.uniqueItems),\n          );\n        }\n      }),\n    );\n    if (keys(errors).length > 0) {\n      this.setState({\n        errors,\n      });\n    } else {\n      this.props.onSubmit(this.state.formData);\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData,\n        });\n      }\n    }\n  }\n\n  /**\n   * Move block handler\n   * @method onMoveBlock\n   * @param {number} dragIndex Drag index.\n   * @param {number} hoverIndex Hover index.\n   * @returns {undefined}\n   */\n  onMoveBlock(dragIndex, hoverIndex) {\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [blocksLayoutFieldname]: {\n          items: move(\n            this.state.formData[blocksLayoutFieldname].items,\n            dragIndex,\n            hoverIndex,\n          ),\n        },\n      },\n    });\n  }\n\n  /**\n   *\n   * @method onFocusPreviousBlock\n   * @param {string} currentBlock The id of the current block\n   * @param {node} blockNode The id of the current block\n   * @returns {undefined}\n   */\n  onFocusPreviousBlock(currentBlock, blockNode) {\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n    const currentIndex = this.state.formData[\n      blocksLayoutFieldname\n    ].items.indexOf(currentBlock);\n\n    if (currentIndex === 0) {\n      // We are already at the top block don't do anything\n      return;\n    }\n    const newindex = currentIndex - 1;\n    blockNode.blur();\n\n    this.onSelectBlock(\n      this.state.formData[blocksLayoutFieldname].items[newindex],\n    );\n  }\n\n  /**\n   *\n   * @method onFocusNextBlock\n   * @param {string} currentBlock The id of the current block\n   * @param {node} blockNode The id of the current block\n   * @returns {undefined}\n   */\n  onFocusNextBlock(currentBlock, blockNode) {\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n    const currentIndex = this.state.formData[\n      blocksLayoutFieldname\n    ].items.indexOf(currentBlock);\n\n    if (\n      currentIndex ===\n      this.state.formData[blocksLayoutFieldname].items.length - 1\n    ) {\n      // We are already at the bottom block don't do anything\n      return;\n    }\n\n    const newindex = currentIndex + 1;\n    blockNode.blur();\n\n    this.onSelectBlock(\n      this.state.formData[blocksLayoutFieldname].items[newindex],\n    );\n  }\n\n  /**\n   * handleKeyDown, sports a way to disable the listeners via an options named\n   * parameter\n   * @method handleKeyDown\n   * @param {object} e Event\n   * @param {number} index Block index\n   * @param {string} block Block type\n   * @param {node} node The block node\n   * @returns {undefined}\n   */\n  handleKeyDown(\n    e,\n    index,\n    block,\n    node,\n    {\n      disableEnter = false,\n      disableArrowUp = false,\n      disableArrowDown = false,\n    } = {},\n  ) {\n      console.log('keydown', node, block)\n    if (e.key === 'ArrowUp' && !disableArrowUp) {\n      this.onFocusPreviousBlock(block, node);\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowDown' && !disableArrowDown) {\n      this.onFocusNextBlock(block, node);\n      e.preventDefault();\n    }\n    if (e.key === 'Enter' && !disableEnter) {\n      this.onAddBlock('text', index + 1);\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { schema, onCancel, onSubmit } = this.props;\n    const { formData } = this.state;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const renderBlocks = formData[blocksLayoutFieldname].items;\n    const blocksDict = formData[blocksFieldname];\n    console.log('in form',this.state.selected)\n    return this.props.visual ? (\n      <div className=\"ui container\">\n        {map(renderBlocks, (block, index) => (\n          <EditBlock\n            id={block}\n            index={index}\n            type={blocksDict[block]['@type']}\n            key={block}\n            handleKeyDown={this.handleKeyDown}\n            onAddBlock={this.onAddBlock}\n            onChangeBlock={this.onChangeBlock}\n            onMutateBlock={this.onMutateBlock}\n            onChangeField={this.onChangeField}\n            onDeleteBlock={this.onDeleteBlock}\n            onSelectBlock={this.onSelectBlock}\n            onMoveBlock={this.onMoveBlock}\n            onFocusPreviousBlock={this.onFocusPreviousBlock}\n            onFocusNextBlock={this.onFocusNextBlock}\n            properties={formData}\n            data={blocksDict[block]}\n            pathname={this.props.pathname}\n            block={block}\n            selected={this.state.selected === block}\n          />\n        ))}\n        <Portal\n          node={__CLIENT__ && document.getElementById('sidebar-metadata')}\n        >\n          <UiForm\n            method=\"post\"\n            onSubmit={this.onSubmit}\n            error={keys(this.state.errors).length > 0}\n          >\n            {schema &&\n              map(schema.fieldsets, item => [\n                <Segment secondary attached key={item.title}>\n                  {item.title}\n                </Segment>,\n                <Segment attached key={`fieldset-contents-${item.title}`}>\n                  {map(item.fields, (field, index) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      focus={index === 0}\n                      value={this.state.formData[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={this.onChangeField}\n                      key={field}\n                      error={this.state.errors[field]}\n                    />\n                  ))}\n                </Segment>,\n              ])}\n          </UiForm>\n        </Portal>\n      </div>\n    ) : (\n      <Container>\n        <UiForm\n          method=\"post\"\n          onSubmit={this.onSubmit}\n          error={keys(this.state.errors).length > 0}\n        >\n          <Segment.Group raised>\n            {schema && schema.fieldsets.length > 1 && (\n              <Tab\n                menu={{\n                  secondary: true,\n                  pointing: true,\n                  attached: true,\n                  tabular: true,\n                  className: 'formtabs',\n                }}\n                panes={map(schema.fieldsets, item => ({\n                  menuItem: item.title,\n                  render: () => [\n                    this.props.title && (\n                      <Segment secondary attached key={this.props.title}>\n                        {this.props.title}\n                      </Segment>\n                    ),\n                    ...map(item.fields, (field, index) => (\n                      <Field\n                        {...schema.properties[field]}\n                        id={field}\n                        fieldSet={item.title.toLowerCase()}\n                        focus={index === 0}\n                        value={this.state.formData[field]}\n                        required={schema.required.indexOf(field) !== -1}\n                        onChange={this.onChangeField}\n                        key={field}\n                        error={this.state.errors[field]}\n                      />\n                    )),\n                  ],\n                }))}\n              />\n            )}\n            {schema && schema.fieldsets.length === 1 && (\n              <Segment>\n                {this.props.title && (\n                  <Segment className=\"primary\">{this.props.title}</Segment>\n                )}\n                {this.props.description && (\n                  <Segment secondary>{this.props.description}</Segment>\n                )}\n                {keys(this.state.errors).length > 0 && (\n                  <Message\n                    icon=\"warning\"\n                    negative\n                    attached\n                    header={this.props.intl.formatMessage(messages.error)}\n                    content={this.props.intl.formatMessage(\n                      messages.thereWereSomeErrors,\n                    )}\n                  />\n                )}\n                {this.props.error && (\n                  <Message\n                    icon=\"warning\"\n                    negative\n                    attached\n                    header={this.props.intl.formatMessage(messages.error)}\n                    content={this.props.error.message}\n                  />\n                )}\n                {map(schema.fieldsets[0].fields, field => (\n                  <Field\n                    {...schema.properties[field]}\n                    id={field}\n                    value={this.state.formData[field]}\n                    required={schema.required.indexOf(field) !== -1}\n                    onChange={this.onChangeField}\n                    key={field}\n                    error={this.state.errors[field]}\n                  />\n                ))}\n              </Segment>\n            )}\n            {!this.props.hideActions && (\n              <Segment className=\"actions\" clearing>\n                {onSubmit && (\n                  <Button\n                    basic\n                    primary\n                    floated=\"right\"\n                    type=\"submit\"\n                    aria-label={\n                      this.props.submitLabel\n                        ? this.props.submitLabel\n                        : this.props.intl.formatMessage(messages.save)\n                    }\n                    title={\n                      this.props.submitLabel\n                        ? this.props.submitLabel\n                        : this.props.intl.formatMessage(messages.save)\n                    }\n                    loading={this.props.loading}\n                  >\n                    <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n                  </Button>\n                )}\n                {onCancel && (\n                  <Button\n                    basic\n                    secondary\n                    aria-label={this.props.intl.formatMessage(messages.cancel)}\n                    title={this.props.intl.formatMessage(messages.cancel)}\n                    floated=\"right\"\n                    onClick={onCancel}\n                  >\n                    <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n                  </Button>\n                )}\n              </Segment>\n            )}\n          </Segment.Group>\n        </UiForm>\n      </Container>\n    );\n  }\n}\n\nexport default injectIntl(Form, { forwardRef: true });"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AA7BA;AAmCA;;;;;;AAKA;;;;;AACA;;;;;;AAmCA;;;;;;AAsBA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AADA;AAIA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AAiDA;AAEA;;;;;;;;;;;AAOA;AACA;AACA;AADA;AAOA;AAEA;;;;;;;;;;AAOA;AACA;AACA;AACA;AADA;AASA;AAEA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAMA;AADA;AAKA;AADA;AAVA;AAmBA;AAEA;;;;;;;;;AAMA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AADA;AAKA;AARA;AAcA;AAEA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AADA;AAcA;AADA;AAKA;AADA;AAMA;AA1BA;AA6BA;AACA;AAEA;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AA7BA;AACA;AA8BA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;;;;;;;;;;AAOA;AACA;AAEA;AACA;AAGA;AADA;AAHA;AAYA;AAEA;;;;;;;;;;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;AAOA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;;;;AAWA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AADA;AAwBA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AADA;AALA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AADA;AANA;AAFA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AADA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAfA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AA5nBA;AACA;AADA;AAOA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AA3BA;AACA;AAPA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAqlBA;AAAA;AAAA;;;;A","sourceRoot":""}