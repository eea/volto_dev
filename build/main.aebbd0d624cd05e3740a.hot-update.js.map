{"version":3,"file":"main.aebbd0d624cd05e3740a.hot-update.js","sources":["webpack:///./src/components/manage/Blocks/Text/Edit.jsx"],"sourcesContent":["/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport Editor from 'react-draft-wysiwyg';\nimport { convertFromRaw, convertToRaw, EditorState } from 'draft-js';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { includes, isEqual } from 'lodash';\n\nimport { settings } from '~/config';\n\nimport { Icon, BlockChooser } from '@plone/volto/components';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(\n          convertFromRaw(props.data.text),\n        );\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: settings.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = {\n        editorState,\n        inlineToolbarPlugin,\n        addNewBlockOpened: false,\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      this.node.focus();\n    }\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (!this.props.selected && nextProps.selected) {\n      this.node.focus();\n      this.setState({\n        editorState: EditorState.moveFocusToEnd(this.state.editorState),\n      });\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillUnmount\n   * @returns {undefined}\n   */\n  componentWillUnmount() {\n    if (this.props.selected) {\n      this.node.focus();\n    }\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    if (\n      !isEqual(\n        convertToRaw(editorState.getCurrentContent()),\n        convertToRaw(this.state.editorState.getCurrentContent()),\n      )\n    ) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        text: convertToRaw(editorState.getCurrentContent()),\n      });\n    }\n    this.setState({ editorState });\n  }\n\n  toggleAddNewBlock = () =>\n    this.setState(state => ({ addNewBlockOpened: !state.addNewBlockOpened }));\n\n  handleClickOutside = e => {\n    if (\n      this.props.blockNode.current &&\n      doesNodeContainClick(this.props.blockNode.current, e)\n    )\n      return;\n    this.setState(() => ({\n      addNewBlockOpened: false,\n    }));\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n\n    return (\n      <>\n        <Editor\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          plugins={[\n            this.state.inlineToolbarPlugin,\n            ...settings.richTextEditorPlugins,\n          ]}\n          blockRenderMap={settings.extendedBlockRenderMap}\n          blockStyleFn={settings.blockStyleFn}\n          placeholder={this.props.intl.formatMessage(messages.text)}\n          handleReturn={() => {\n            if (!this.props.detached) {\n              const selectionState = this.state.editorState.getSelection();\n              const anchorKey = selectionState.getAnchorKey();\n              const currentContent = this.state.editorState.getCurrentContent();\n              const currentContentBlock = currentContent.getBlockForKey(\n                anchorKey,\n              );\n              const blockType = currentContentBlock.getType();\n              if (!includes(settings.listBlockTypes, blockType)) {\n                this.props.onSelectBlock(\n                  this.props.onAddBlock('text', this.props.index + 1),\n                );\n                return 'handled';\n              }\n              return 'un-handled';\n            }\n            return {};\n          }}\n          handleKeyCommand={(command, editorState) => {\n            if (\n              command === 'backspace' &&\n              editorState.getCurrentContent().getPlainText().length === 0\n            ) {\n              this.props.onDeleteBlock(this.props.block, true);\n            }\n          }}\n          onUpArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const currentCursorPosition = selectionState.getStartOffset();\n\n            if (currentCursorPosition === 0) {\n              this.props.onFocusPreviousBlock(this.props.block, this.node);\n            }\n          }}\n          onDownArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const { editorState } = this.state;\n            const currentCursorPosition = selectionState.getStartOffset();\n            const blockLength = editorState\n              .getCurrentContent()\n              .getFirstBlock()\n              .getLength();\n\n            if (currentCursorPosition === blockLength) {\n              this.props.onFocusNextBlock(this.props.block, this.node);\n            }\n          }}\n          ref={node => {\n            this.node = node;\n          }}\n        />\n        <InlineToolbar />\n        {!this.props.detached &&\n          (!this.props.data.text ||\n            (this.props.data.text &&\n              this.props.data.text.blocks &&\n              this.props.data.text.blocks.length === 1 &&\n              this.props.data.text.blocks[0].text === '')) && (\n            <Button\n              basic\n              icon\n              onClick={this.toggleAddNewBlock}\n              className=\"block-add-button\"\n            >\n              <Icon name={addSVG} className=\"block-add-button\" size=\"24px\" />\n            </Button>\n          )}\n        {this.state.addNewBlockOpened && (\n          <BlockChooser\n            onMutateBlock={this.props.onMutateBlock}\n            currentBlock={this.props.block}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default injectIntl(Edit);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AAOA;;;;;;AAKA;;;;;AACA;;;;;;AAoBA;;;;;;AASA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAuFA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAxFA;AA2FA;AACA;AAIA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAjGA,wDAmBA;AACA;AACA;AAxBA;AAyBA;AAEA;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;AAMA;AACA;AAMA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;;;;AAgBA;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAOA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAAA;AAAA;AAAA;AAAA;AA8DA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA7OA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAPA;AA2BA;AADA;AACA;AAqNA;;;;A","sourceRoot":""}