{"version":3,"file":"main.b0495f2bb862f50d5550.hot-update.js","sources":["webpack:///./src/components/manage/Blocks/Text/Edit.jsx"],"sourcesContent":["/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport cx from 'classnames';\n\n// import Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n// import Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n// import Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n// import Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      const htmltext = (props.data && props.data.cktext) || '';\n\n      this.state = {\n        htmltext,\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event, editor) {\n    console.log('onchange', event)\n    this.props.onKeyPress(this.props.handleKeyDown(event,\n            this.props.index,\n            this.props.block,\n            this.ref,\n            {\n              disableEnter: true,\n              disableArrowUp: true,\n              disableArrowDown: true,\n          }))\n    const cktext = editor.getData();\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      cktext,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const CKEditor = require('@ckeditor/ckeditor5-react');\n    const ClassicEditor = require('@ckeditor/ckeditor5-build-classic');\n    // console.log(\n    //   'plugins',\n    //   ClassicEditor.builtinPlugins.map(plugin => plugin.pluginName),\n    // );\n    // const ClassicEditor = require('@ckeditor/ckeditor5-build-balloon-block');\n    // const ClassicEditor = require('@ckeditor/ckeditor5-editor-classic/src/classiceditor');\n\n    const editorConfiguration = {\n      heading: {\n        options: [\n          // {\n          //   model: 'paragraph',\n          //   title: 'Paragraph Tibi',\n          //   class: 'ck-heading_paragraph',\n          // },\n          {\n            model: 'heading5',\n            view: 'h5',\n            title: 'Block Title (H5)',\n            class: 'ck-heading_heading5',\n          },\n          {\n            model: 'block_description',\n            view: {\n              name: 'div',\n              classes: 'chart-highlight',\n            },\n            title: 'Block Description',\n            class: 'chart-highlight',\n          },\n          // {\n          //   model: 'heading2',\n          //   view: 'h2',\n          //   title: 'Heading 2',\n          //   class: 'ck-heading_heading2',\n          // },\n        ],\n      },\n    };\n    //\n\n      console.log(this.props)\n    return (\n      <div\n        role=\"presentation\"\n        onClick={() => this.props.onSelectBlock(this.props.block)}\n        className={cx('block text', { selected: this.props.selected })}\n        ref={node => (this.ref = node)}\n      >\n        <CKEditor\n          config={editorConfiguration}\n          editor={ClassicEditor}\n          data={this.state.htmltext}\n          onInit={editor => {\n            // You can store the \"editor\" and use when it is needed.\n            // console.log('Editor is ready to use!', editor);\n          }}\n          onChange={this.onChange}\n          // onKeyPress={(e)=>this.props.handleKeyDown(e,\n          //   this.props.index,\n          //   this.props.block,\n          //   this.ref,\n          //   {\n          //     disableEnter: true,\n          //     disableArrowUp: true,\n          //     disableArrowDown: true,\n          // })}\n          onBlur={(event, editor) => {}}\n          onFocus={(event, editor) => {}}\n        />\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;;AAKA;;;;;AACA;;;;;;AAoBA;;;;;;AASA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA,gCAMA;AACA;AACA;AAXA;AAYA;AACA;;;AACA;AACA;AACA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAFA;AAIA;AAEA;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AA1BA;AADA;AADA;AACA;AAiCA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAkBA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAuBA;;;;AAxJA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAPA;AA2BA;AADA;AACA;AAgIA;;;;A","sourceRoot":""}